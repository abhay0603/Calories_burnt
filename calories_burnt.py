# -*- coding: utf-8 -*-
"""calories_burnt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B-nodFn_3EA7624VUpeBIcxU0nQUKcaF

## Importing the Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing Data"""

dataset_1 = pd.read_csv('exercise.csv')
dataset_2 = pd.read_csv('calories.csv')
dataset = pd.concat([dataset_1,dataset_2.Calories],axis=1)
x = dataset.iloc[:,1:-1].values
y = dataset.iloc[:,-1].values

"""## Taking Care of Missing Data

"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer( missing_values= np.nan,strategy='mean')
imputer.fit(x[:,1:7])
x[:,1:7] = imputer.transform(x[:,1:7])

"""## Encoding Categorical Data

"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
x[:,0] = le.fit_transform(x[:,0])

"""##Spliting dataset into the Training set and Testing set."""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=0)

"""## Train Multilinear Regression"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train, y_train)

regressor.score(x_train,y_train)

regressor.score(x_test,y_test)

"""##predicting test set"""

y_pred = regressor.predict(x_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

"""## Visualization"""

plt.figure(figsize=(15,10))
plt.scatter(y_pred,y_test)
plt.xlabel('Atual Calories')
plt.ylabel('Predicted Calories')
plt.title('Atual Calories v/s Predicted Calories')

"""##R-Squared"""

from sklearn.metrics import r2_score
r_squared = r2_score(y_test, y_pred)
print(r_squared)

"""## Mean-Squared-Error"""

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test,y_pred)
print(mse)

"""## Root-Mean-Squared-Error"""

import math
rmse = math.sqrt(mse)
print(rmse)

"""## Adjusted R-Squared"""

n = len(y)
p = 1
adjusted_r_squared = 1 - (1 - r_squared) * (n - 1) / (n - p - 1)
print(adjusted_r_squared)